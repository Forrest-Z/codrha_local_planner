#!/usr/bin/env python
# CODRHA Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t, str_t
from local_planner_limits import add_generic_localplanner_params

gen = ParameterGenerator()

# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
add_generic_localplanner_params(gen)

PACKAGE = "codrha_local_planner"

gen.add("plan_time", double_t, 0, "The amount of time to roll trajectories out for in seconds", 1.4, 0.0)
gen.add("comp_time", double_t, 0, "The amount of time to roll trajectories out for in seconds", 0.3, 0.0)
gen.add("plan_granularity", double_t, 0, "The granularity with which to check for collisions and other constraints in seconds", 0.1, 0.0)
gen.add("timeout_first_plan", double_t, 0, "The amount of time allowed for computing first trajectory in seconds", 1.5)

gen.add("traj_spl_n_ctrl_pts", int_t, 0, "Number of control points for the trajectory spline", 8, 6)
gen.add("max_vel_lin", double_t, 0, "The absolute value of the maximum linear velocity for the robot in m/s",  .3, 0,) # .5
gen.add("max_vel_theta", double_t, 0, "The absolute value of the maximum rotational velocity for the robot in rad/s",  3.0, 0, 20.0) # 3.14
gen.add("max_acc_lin", double_t, 0, "The absolute value of the maximum linear velocity for the robot in m/s",  0.5, 0, 200.0) # 0.8
gen.add("max_acc_theta", double_t, 0, "The absolute value of the maximum rotational velocity for the robot in rad/s",  10.0, 0, 200.0) # 14
gen.add("acc_sup_x_init", double_t, 0, "",  0.49, 0., 20.0)
gen.add("acc_inf_x_init", double_t, 0, "",  -0.49, -20., 0.)
gen.add("radius", double_t, 0, "Half of robot's footprint", .25) # turtlebot large dimension in xy plane is 351.5 mm (should use this as diameter). Its radius is 175 in the documentation (0.75 mm smaller than 351.5/2)
gen.add("last_step_min_dist", double_t, 0, "Safety distance to start planning last step before reaching target pose", 0.0);

gen.add("robot_obst_safety_dist", double_t, 0, "Safety distance between robot and obstacles in meters", 0.0)

gen.add("opt_method", str_t, 0, "Numerical optimization method", "SLSQP")
# Read http://ab-initio.mit.edu/wiki/index.php/NLopt_Reference for details on stop criteria
gen.add("opt_objective_func_abs_tol", double_t, 0, "Absolute tolerance on objective function value", 1e-9)
gen.add("opt_objective_func_rel_tol", double_t, 0, "Relative tolerance on objective function value", 0.0)
gen.add("opt_param_rel_tol", double_t, 0, "Relative tolerance on optimization parameters", 0.0)
gen.add("opt_param_abs_tol", double_t, 0, "Absolute tolerance on optimization parameters", 0.0)
gen.add("opt_equetions_abs_tol", double_t, 0, "Absolute tolerance on equations constraints", 0.0)
gen.add("opt_inequetions_tol_abs_tol", double_t, 0, "Absolute tolerance on inequations constraints", 0.0)

gen.add("num_dif_eps_multiplier", double_t, 0, "Numerical differentiation step will be computed as eps*10^X", 5)

gen.add("first_guess_tweak", double_t, 0, "Tweak for creating first guess for trajectory (path's shape)", 1.2)
gen.add("cost_tweak", double_t, 0, "Tweak for modulating the cost/objective function", 10.)
gen.add("max_vel_init_factor", double_t, 0, "This value times the maximum linear velocity specify the maximum linear velocity for initialization", .99, 0.1, 1.0)

# MIN ERROR
# gen.add("dy_model_0", double_t, 0, "Dynamic model parameter", 0.130290160701)
# gen.add("dy_model_1", double_t, 0, "Dynamic model parameter", 0.815040791874)
# gen.add("dy_model_2", double_t, 0, "Dynamic model parameter", -0.018660923109)
# gen.add("dy_model_3", double_t, 0, "Dynamic model parameter", 1.122300316277)
# gen.add("dy_model_4", double_t, 0, "Dynamic model parameter", -0.908317852064)
# gen.add("dy_model_5", double_t, 0, "Dynamic model parameter", 1.381361717393)

# MIN VEL
gen.add("dy_model_0", double_t, 0, "Dynamic model parameter", 0.066176592056)
gen.add("dy_model_1", double_t, 0, "Dynamic model parameter", 0.177649277021)
gen.add("dy_model_2", double_t, 0, "Dynamic model parameter", 0.014035969931)
gen.add("dy_model_3", double_t, 0, "Dynamic model parameter", 1.151888800924)
gen.add("dy_model_4", double_t, 0, "Dynamic model parameter", -0.987128155035)
gen.add("dy_model_5", double_t, 0, "Dynamic model parameter", 1.506200940000)

# gen.add("dy_model_0", double_t, 0, "Dynamic model parameter", 0.098467002684)
# gen.add("dy_model_1", double_t, 0, "Dynamic model parameter", 0.210947988523)
# gen.add("dy_model_2", double_t, 0, "Dynamic model parameter", 0.036763650402)
# gen.add("dy_model_3", double_t, 0, "Dynamic model parameter", 1.160536138389)
# gen.add("dy_model_4", double_t, 0, "Dynamic model parameter", -0.829946702752)
# gen.add("dy_model_5", double_t, 0, "Dynamic model parameter", 1.436385491343)

gen.add("ctrl_prediction_time", double_t, 0, "Prediction time for MPC", .3)
gen.add("ctrl_integ_step", double_t, 0, "Time step for numercic integration", .001)

gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration.", False)

gen.add("respect_obst_const", bool_t, 0, "Respect constraints for obstacle avoidance.", True)
gen.add("respect_obst_const_term", bool_t, 0, "Respect constraints for obstacle avoidance in the termination phase.", True)
gen.add("respect_accel_const", bool_t, 0, "Respect constraints for limited acceleration.", True)
gen.add("respect_accel_const_term", bool_t, 0, "Respect constraints for limited acceleration in the termination phase.", True)

exit(gen.generate(PACKAGE, "codrha_planner_ros", "CODRHAPlanner"))
